!function(e){var t={};function r(a){if(t[a])return t[a].exports;var s=t[a]={i:a,l:!1,exports:{}};return e[a].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(a,s,function(t){return e[t]}.bind(null,s));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=13)}([function(e,t){e.exports=require("express")},function(e,t){e.exports=require("axios")},function(e,t){e.exports=require("dotenv")},function(e,t){e.exports=require("shortid")},function(e,t){e.exports=require("jsonwebtoken")},function(e,t){e.exports=require("querystring")},function(e,t){e.exports=require("bcrypt")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("nodemailer-promise")},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("mongodb")},function(e,t){e.exports=require("cors")},function(e,t){e.exports=require("morgan")},function(e,t,r){"use strict";r.r(t);var a=r(0),s=r.n(a),n=r(12),o=r.n(n),i=r(11),c=r.n(i),u=r(7),d=r(3),l=r.n(d),h=r(10),T=r(2),g=r.n(T);g.a.config();const{DB_URL:w,DB_NAME:m,USERS_COLLECTION:O,ORGANISATIONS_COLLECTION:E,TEST_DB_URL:p,TEST_DB_NAME:_,TEST_USERS_COLLECTION:y,TEST_ORGANISATIONS_COLLECTION:I,SECRET:A,SALT_ROUNDS:C}=process.env,R=process.env.PORT||8e3,U={FRONTEND_URL:"http://localhost:8080"};U.FRONTEND_URL="https://the-remotants.netlify.com";const S={DB_URL:w,DB_NAME:m,USERS_COLLECTION:O,ORGANISATIONS_COLLECTION:E,SECRET:A,SALT_ROUNDS:C,ONE_DAY:604800,ONE_HOUR:3600,PORT:R,URLS:U,ERROR_CODES:{BAD_REQUEST:400,UNAUTHORIZED:401,FORBIDDEN:403,NOT_FOUND:404,TOO_MANY_REQUESTS:429,SERVER_ERROR:500}},f=S.DB_URL,{DB_NAME:L}=S;let N;const v=async()=>{if(await(async()=>(void 0===N&&(N=await h.MongoClient.connect(f,{useNewUrlParser:!0})),N))(),void 0===N)throw new Error("No connection instance present");return N.db(L)};var H=r(4),k=r.n(H);var D=e=>({errors:{name:e}});var j=async(e,t,r)=>{try{const a=await e.collection(t).find({email:r}).project({_id:0}).toArray(),[s]=a;return void 0===s?null:s}catch(e){return D("Error fetching user")}};var b=(e,t)=>void 0===t||null===t?{success:!0}:{success:!0,[e]:t};const G=e=>{return k.a.sign({email:e},S.SECRET,{expiresIn:Math.floor((new Date).getTime()/1e3)+ +S.ONE_DAY})};var P=r(6),$=r.n(P);const B=async e=>{return await $.a.hash(e,Number(S.SALT_ROUNDS))},M="/register",q="/login",x="/github/authenticate/:code",W="/wakatime/authenticate/:code",Y="/setup",K="/update/:id",z="/:id",F="/list",Q="/invite",J={BasicSetup:"/setup-1",OAuthSetup:"/setup-2",Organisation:"/organisation",WakaTime:"/api/wakatime",GitHub:"/api/github",User:"/user"},V="https://wakatime.com/api/v1",Z="/users/current/projects",X="/users/current/projects/:project/commits",ee="/users/current/durations",te="/users/current",re="/users/all/:userID",ae="/users/current/stats/:dateRange",se="/users/current/summaries",ne="/users/checkToken",oe={Projects:`${V}/users/current/projects`,Durations:`${V}/users/current/durations`,UserDetails:`${V}/users/current`,Stats:`${V}/users/current/stats`,Summaries:`${V}/users/current/summaries`},ie="/user/issues",ce="/user/repos",ue="/user/repos/:owner/:repo/pulls",de="/users/checkToken",le={Issues:"https://api.github.com/user/issues",Repos:"https://api.github.com/user/repos",RepoPullRequests:"https://api.github.com/repos"};var he={Home:"/",Test:"/test",Auth:"/auth",Dashboard:"/dashboard",InviteAuth:"/invite/auth"};const Te=s.a.Router(),ge=async(e,t,{id:r,email:a,password:s})=>{try{if(0===await e.collection(t).count({email:a})){return await(async(e,t,{id:r,email:a,password:s})=>{try{const n=await B(s);return await e.collection(t).insertOne({id:r,email:a,password:n}),b()}catch(e){return D("[Register]: Caught an error while adding/updating user")}})(e,t,{id:r,email:a,password:s})}return D("User exists")}catch(e){return D("[Register]: Caught an error while registering user.")}},we=async(e,t,{email:r,password:a})=>{try{const s=await e.collection(t).findOne({email:r});if(null===s)return D("Email entered is incorrect");const n=s.password;if(!1===await(async(e,t)=>{return await $.a.compare(e,t)})(a,n))return D("Password entered is incorrect");const o=G(s.email);return b("token",o)}catch(e){return D("[Login]: Caught an error while getting user from the database.")}};Te.post(M,async(e,t)=>{const r=await v(),a=S.USERS_COLLECTION,s=e.body,n=l.a.generate().toLowerCase(),o=await ge(r,a,{...s,id:n});let i;if(!0===o.success){const e=G(s.email);i=b("token",e)}else i={errors:o.errors};t.json(i)}),Te.post(q,async(e,t)=>{const r=await v(),a=S.USERS_COLLECTION,s=e.body,n=await we(r,a,s);t.json(n)});var me=Te;var Oe=async(e,t,r)=>{try{return 0===await e.collection(t).count({username:r})?b():D("Username already exists.")}catch(e){return D("Caught an error while finding if username exists or not")}};const Ee=s.a.Router();Ee.post(he.Home,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,n=await(async(e,t,r,a)=>{const{name:s,username:n}=a,o=await Oe(e,t,n);if(!0!==o.success)return o;try{return await e.collection(t).update({email:r},{$set:{name:s,username:n}}),b()}catch(e){return D("[Update]: Caught an error while updating user details.")}})(a,s,r,e.body);t.json(n)});var pe=Ee,_e=r(9),ye=r.n(_e),Ie=r(5),Ae=r.n(Ie);g.a.config();const{OAUTH_PORT:Ce,OAUTH_METHOD:Re,OAUTH_GITHUB_CLIENT_ID:Ue,OAUTH_GITHUB_CLIENT_SECRET:Se,OAUTH_GITHUB_HOST:fe,OAUTH_GITHUB_PATH:Le,OAUTH_WAKATIME_CLIENT_ID:Ne,OAUTH_WAKATIME_CLIENT_SECRET:ve,OAUTH_WAKATIME_HOST:He,OAUTH_WAKATIME_PATH:ke}=process.env;var De={OAUTH_PORT:Ce,OAUTH_METHOD:Re,OAUTH_GITHUB_CLIENT_ID:Ue,OAUTH_GITHUB_CLIENT_SECRET:Se,OAUTH_GITHUB_HOST:fe,OAUTH_GITHUB_PATH:Le,OAUTH_GITHUB_REDIRECT_URI:`${S.URLS.FRONTEND_URL}/setup-2?auth=github`,OAUTH_WAKATIME_CLIENT_ID:Ne,OAUTH_WAKATIME_CLIENT_SECRET:ve,OAUTH_WAKATIME_HOST:He,OAUTH_WAKATIME_PATH:ke,OAUTH_WAKATIME_REDIRECT_URI:`${S.URLS.FRONTEND_URL}/setup-2?auth=wakatime`};const je=s.a.Router(),be=async(e,t,r,a,s)=>{try{return await e.collection(t).update({email:r},{$set:{[a]:s}}),b()}catch(e){return D("Caught an error at the time of storing auth details")}},Ge=(e,t,r)=>{const{data:a,reqOptions:s}=((e,t)=>{let r,a;return"github"===e?(r=Ae.a.stringify({client_id:De.OAUTH_GITHUB_CLIENT_ID,client_secret:De.OAUTH_GITHUB_CLIENT_SECRET,redirect_uri:De.OAUTH_GITHUB_REDIRECT_URI,code:t}),a={host:De.OAUTH_GITHUB_HOST,port:De.OAUTH_PORT,path:De.OAUTH_GITHUB_PATH,method:De.OAUTH_METHOD,headers:{"Content-Type":"application/x-www-form-urlencoded","content-length":r.length}}):"wakatime"===e&&(r=Ae.a.stringify({client_id:De.OAUTH_WAKATIME_CLIENT_ID,client_secret:De.OAUTH_WAKATIME_CLIENT_SECRET,redirect_uri:De.OAUTH_WAKATIME_REDIRECT_URI,grant_type:"authorization_code",code:t}),a={host:De.OAUTH_WAKATIME_HOST,port:De.OAUTH_PORT,path:De.OAUTH_WAKATIME_PATH,method:De.OAUTH_METHOD,headers:{"Content-Type":"application/x-www-form-urlencoded","content-length":r.length}}),{data:r,reqOptions:a}})(e,t);let n="";const o=ye.a.request(s,e=>{e.setEncoding("utf8"),e.on("data",e=>{n+=e}),e.on("end",()=>{r(null,Ae.a.parse(n))})});o.write(a),o.end(),o.on("error",e=>{r(e)})};je.all("*",(e,t,r)=>{t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Methods","GET, POST, OPTIONS"),t.header("Access-Control-Allow-Headers","Content-Type"),r()}),je.get(x,(e,t)=>{Ge("github",e.params.code,async(r,a)=>{const s={};if(null!==r)s.errors={name:"Got an error while connecting to GitHub"};else{const t=a;s.token=t.access_token;const{currentUser:r}=e,n=await v(),o=S.USERS_COLLECTION,{success:i,errors:c}=await be(n,o,r,"github",t);!0===i?s.success=i:s.errors=c}t.json(s)})}),je.get(W,(e,t)=>{Ge("wakatime",e.params.code,async(r,a)=>{const s={};if(null!==r)s.errors={name:"Got an error while connecting to WakaTime"};else{let[t]=Object.keys(a);t=JSON.parse(t),s.token=t.access_token;const{currentUser:r}=e,n=await v(),o=S.USERS_COLLECTION,{success:i,errors:c}=await be(n,o,r,"wakatime",t);!0===i?s.success=i:s.errors=c}t.json(s)})});var Pe=je;var $e=async(e,t,r)=>{try{const a=(await j(e,t,r)).id;return b("userID",a)}catch(e){return D("Error fetching user ID")}};var Be=async(e,t,r)=>{try{const a=await e.collection(t).find({id:r}).project({_id:0}).toArray(),[s]=a;return void 0===s?D("No such user exists"):b("data",s)}catch(e){return D("Error fetching user")}},Me=r(1),qe=r.n(Me);const{ERROR_CODES:xe}=S;var We=e=>{switch(e.response.status){case xe.BAD_REQUEST:return D("Bad Request");case xe.UNAUTHORIZED:return D("Unauthorized");case xe.FORBIDDEN:return D("You don't have permissions to access this section!");case xe.NOT_FOUND:return D("Not found");case xe.TOO_MANY_REQUESTS:return D("Too many requests");case xe.SERVER_ERROR:return D("Server error");default:return D("Caught an error while making API request to WakaTime")}};var Ye=async e=>{const t={method:"GET",headers:{Authorization:`Bearer ${e}`}};try{const e=await qe()(oe.UserDetails,t),{data:r}=e.data;return b("data",r)}catch(e){return void 0===e.response?D("Caught an error while making API request to WakaTime"):We(e)}};const Ke=e=>{const t=[];return e.forEach(e=>{if(!0===e.success){const{id:r,name:a,email:s}=e.data,n={id:r,name:a,email:s};t.push(n)}}),t},ze=(e,t,r)=>{const a=[];for(let s=0;s<r.length;s+=1){const n=r[s],o=Be(e,t,n);a.push(o)}return a};var Fe={registerOrganisation:async(e,t,{name:r,description:a,ownerID:s})=>{try{return 0===await e.collection(t).count({name:r})?await(async(e,t,{name:r,description:a,ownerID:s})=>{const n=l.a.generate().toLowerCase();try{return await e.collection(t).insertOne({id:n,name:r,description:a,ownerID:s,employee:[],manager:[]}),b()}catch(e){return D("Caught an error while adding organisation to the Database.")}})(e,t,{name:r,description:a,ownerID:s}):D("Organisation exists")}catch(e){return D("Caught an error while registering org.")}},listOrganisations:async(e,t,r,a)=>{try{const s=await e.collection(t).find({ownerID:r}).project({_id:0,ownerID:0}).toArray();if(0===s.length)return D("This user doesn't own any organisation");const n=S.USERS_COLLECTION,o=await Promise.all(s.map(async t=>{const r=t.manager,a=ze(e,n,r),s=await Promise.all(a),o=Ke(s),i=t.employee,c=ze(e,n,i),u=await Promise.all(c),d=Ke(u);return{...t,manager:o,employee:d}})),{success:i,data:c,errors:u}=await Ye(a),d=c;if(!0!==i)return{errors:u};const l=o.map(e=>({...e,wakatime:d}));return b("data",l)}catch(e){return D("Caught an error while fetching organisations.")}}};var Qe=async(e,t,r)=>{try{const a=await e.collection(t).find({id:r}).project({_id:0,ownerID:1}).toArray(),[s]=a,n=s.ownerID;return void 0===n?null:n}catch(e){return"Error fetching owner id"}};var Je=async(e,t,r)=>{try{const a=await e.collection(t).find({id:r}).project({_id:0}).toArray(),[s]=a;return null===s||void 0===s?D("User not found"):b("token",s.wakatime.access_token)}catch(e){return D("Error fetching user")}};const Ve=s.a.Router(),Ze=async(e,t,r)=>{try{const a=await e.collection(t).find({email:r}).project({_id:0,"wakatime.access_token":1}).toArray(),[s]=a;if(void 0===s.wakatime)return D("You need to connect your WakaTime account!");const n=s.wakatime.access_token;return void 0===n?D("You need to connect your WakaTime account!"):b("token",n)}catch(e){return console.log(e),void 0===e.response?D("Caught an error while making API request to WakaTime"):We(e)}},Xe=async(e,t)=>{const r={method:"GET",headers:{Authorization:`Bearer ${e}`}};try{const e=await qe()(`${oe.Durations}?date=${t}`,r),{data:a}=e.data,s=(e=>{const t=new Map;e.forEach(e=>{const r=t.get(e.project);void 0===r?t.set(e.project,e.duration):t.set(e.project,r+e.duration)});const r=[];return t.forEach((e,t)=>{r.push({project:t,duration:e})}),r})(a);return b("data",s)}catch(e){return void 0===e.response?D("Caught an error while making API request to WakaTime"):We(e)}},et=async(e,t)=>{const r={method:"GET",headers:{Authorization:`Bearer ${e}`}};try{const e=await qe()(`${oe.Stats}/${t}`,r),{data:a}=e.data;return b("data",a)}catch(e){return void 0===e.response?D("Caught an error while making API request to WakaTime"):We(e)}};Ve.get(Z,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,{success:n,token:o,errors:i}=await Ze(a,s,r);let c;if(!0===n){const e=await(async e=>{const t={method:"GET",headers:{Authorization:`Bearer ${e}`}};try{const e=await qe()(oe.Projects,t),{data:r}=e.data;return b("data",r)}catch(e){return void 0===e.response?D("Caught an error while making API request to WakaTime"):We(e)}})(o);c=!0!==e.success?{errors:e.errors}:e}else c={errors:i};t.json(c)}),Ve.get(X,async(e,t)=>{const r=e.params.project,{currentUser:a}=e,s=await v(),n=S.USERS_COLLECTION,{success:o,token:i,errors:c}=await Ze(s,n,a);let u;if(!0===o){const e=await(async(e,t)=>{const r={method:"GET",headers:{Authorization:`Bearer ${e}`}};try{const e=await qe()(`${oe.Projects}/${t}/commits`,r),{data:a}=e;return b("data",a)}catch(e){return void 0===e.response?D("Caught an error while making API request to WakaTime"):We(e)}})(i,r);u=!0!==e.success?{errors:e.errors}:e}else u={errors:c};t.json(u)}),Ve.get(ee,async(e,t)=>{const{date:r}=e.query,{currentUser:a}=e,s=await v(),n=S.USERS_COLLECTION,{success:o,token:i,errors:c}=await Ze(s,n,a);let u;if(!0===o){const e=await Xe(i,r);u=!0!==e.success?{errors:e.errors}:e}else u={errors:c};t.json(u)}),Ve.get(ae,async(e,t)=>{const{dateRange:r}=e.params,{currentUser:a}=e,s=await v(),n=S.USERS_COLLECTION,{success:o,token:i,errors:c}=await Ze(s,n,a);let u;if(!0===o){const e=await et(i,r);u=!0!==e.success?{errors:e.errors}:e}else u={errors:c};t.json(u)}),Ve.get(se,async(e,t)=>{const{start:r,end:a}=e.query,{currentUser:s}=e,n=await v(),o=S.USERS_COLLECTION,{success:i,token:c,errors:u}=await Ze(n,o,s);let d;if(!0===i){const e=await(async(e,{start:t,end:r})=>{const a={method:"GET",headers:{Authorization:`Bearer ${e}`}};try{const e=await qe()(`${oe.Summaries}?start=${t}&end=${r}`,a),{data:s}=e.data;return b("data",s)}catch(e){return void 0===e.response?D("Caught an error while making API request to WakaTime"):We(e)}})(c,{start:r,end:a});d=!0!==e.success?{errors:e.errors}:e}else d={errors:u};t.json(d)}),Ve.get(te,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,{success:n,token:o,errors:i}=await Ze(a,s,r);let c;if(!0===n){const e=await(async e=>{const t={method:"GET",headers:{Authorization:`Bearer ${e}`}};try{const e=await qe()(oe.UserDetails,t),{data:r}=e.data;return b("data",r)}catch(e){return void 0===e.response?D("Caught an error while making API request to WakaTime"):We(e)}})(o);c=!0!==e.success?{errors:e.errors}:e}else c={errors:i};t.json(c)}),Ve.get(re,async(e,t)=>{const{userID:r}=e.params,a=await v(),s=S.USERS_COLLECTION,{success:n,token:o,errors:i}=await Je(a,s,r);if(!0!==n)return void t.json({errors:i});let c;const u=await et(o,"last_7_days");c=!0!==u.success?{errors:u.errors}:u,t.json(c)}),Ve.get(ne,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,n=await Ze(a,s,r);!0===n.success?t.json(b()):"You need to connect your WakaTime account!"===n.errors.name?t.json({success:!1}):t.json({errors:n.errors})});var tt=Ve,rt=r(8),at=r.n(rt);g.a.config();const{MAILER_USER:st,MAILER_PASS:nt}=process.env;var ot=at.a.config({from:"the-remotants@gmail.com",host:"smtp.gmail.com",secureConnection:!0,port:465,transportMethod:"SMTP",auth:{user:st,pass:nt}});var it=(e,t,r)=>{return k.a.sign({email:e,manager:t,organisation:r},S.SECRET,{expiresIn:Math.floor(Date.now()/1e3)+ +S.ONE_HOUR})};var ct=({email:e,organisation:t,manager:r,token:a,URL:s})=>(console.log(t),`\n    <h2>Hey ${e} </h2>\n    <br />\n    You are invited to join ${t} as\n\n    ${1===r?"<strong>a manager</strong>":"<strong>an employee</strong>"};\n    <br />\n    Click <a href=${s}/invite/register?token=${a}"</a>here</a> to register.\n  `);const ut=s.a.Router(),{registerOrganisation:dt,listOrganisations:lt}=Fe,ht=async(e,t,r)=>{try{const a=await e.collection(t).find({id:r}).project({_id:0}).toArray(),[s]=a;return void 0===s?null:b("data",s)}catch(e){return D("Error finding organisation")}};ut.post(Y,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,n=S.ORGANISATIONS_COLLECTION,o=await $e(a,s,r);if(!0!==o.success)t.json(D("Could not fetch User ID"));else{const r=await dt(a,n,{...e.body,ownerID:o.userID});t.json(r)}}),ut.get(F,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,n=S.ORGANISATIONS_COLLECTION,o=await $e(a,s,r);if(!0!==o.success)t.json(D("Could not fetch User ID"));else{const{success:e,token:i,errors:c}=await Ze(a,s,r);if(!1===e)t.json(c);else{const e=await lt(a,n,o.userID,i);t.json(e)}}}),ut.get(z,async(e,t)=>{const r=await v(),a=S.ORGANISATIONS_COLLECTION,s=e.params.id,n=await ht(r,a,s);null===n?t.json(D("This organisation does not exist")):t.json(n)}),ut.post(K,async(e,t)=>{const r=e.params.id,a=await v(),s=S.USERS_COLLECTION,n=S.ORGANISATIONS_COLLECTION,o=await Qe(a,n,r),{currentUser:i}=e;if((await $e(a,s,i)).userID!==o)t.json(D("You are not the owner"));else{const s=await(async(e,t,r,a)=>{const{name:s,description:n}=a;try{return await e.collection(t).update({id:r},{$set:{name:s,description:n}}),b()}catch(e){return D("[Register]: Caught an error while updating organisation details.")}})(a,n,r,e.body);t.json(s)}}),ut.post(Q,async(e,t)=>{const{emails:r,manager:a,organisationID:s}=e.body,n=JSON.parse(r),o=await v(),i=S.USERS_COLLECTION,c=S.ORGANISATIONS_COLLECTION,u=await Qe(o,c,s),{currentUser:d}=e;if((await $e(o,i,d)).userID!==u)t.json(D("You are forbidden to invite other members"));else{const e=await ht(o,c,s),{URLS:{FRONTEND_URL:r}}=S;n.forEach(async n=>{const o=it(n,a,s),i=ct({email:n,organisation:e.data.name,manager:a,token:o,URL:r});try{const e={from:"theremotants@gmail.com",to:n,subject:"[Invite] You are invited",html:i};await ot(e)}catch(e){t.json(D("Caught error while sending mail!"))}}),t.json(b())}});var Tt=ut;const gt=s.a.Router(),wt=async(e,t,r)=>{try{const a=await e.collection(t).find({email:r}).project({_id:0,"github.access_token":1}).toArray(),[s]=a;if(void 0===s.github)return D("You need to connect your GitHub account!");const n=s.github.access_token;return void 0===n?D("You need to connect your GitHub account!"):b("token",n)}catch(e){return D("Caught an error while getting details from Mongo")}};gt.get(ie,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,{success:n,token:o,errors:i}=await wt(a,s,r);let c;if(!0===n){const e={method:"GET",headers:{Authorization:`Bearer ${o}`}};try{const t=await qe()(le.Issues,e);c=b("data",t.data)}catch(e){c=D("Caught an error while making request to Github")}}else c={errors:i};t.json(c)}),gt.get(ce,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,{success:n,token:o,errors:i}=await wt(a,s,r);let c;if(!0===n){const e={method:"GET",headers:{Authorization:`Bearer ${o}`}};try{const t=await qe()(le.Repos,e);c=b("data",t.data)}catch(e){c=D("Caught an error while making request to Github")}}else c={errors:i};t.json(c)}),gt.get(ue,async(e,t)=>{const r=e.params.repo,a=e.params.owner,{currentUser:s}=e,n=await v(),o=S.USERS_COLLECTION,{success:i,token:c,errors:u}=await wt(n,o,s);let d;if(!0===i){const e={method:"GET",headers:{Authorization:`Bearer ${c}`}};try{const t=await qe()(`${le.RepoPullRequests}/${a}/${r}/pulls`,e),{data:s}=t;d=b("data",s)}catch(e){d=403===e.response.status?D("You don't have permissions to access this section"):D("Caught an error while fetching data from GitHub")}}else d={errors:u};t.json(d)}),gt.get(de,async(e,t)=>{const{currentUser:r}=e,a=await v(),s=S.USERS_COLLECTION,n=await wt(a,s,r);!0===n.success?t.json(b()):"You need to connect your GitHub account!"===n.errors.name?t.json({success:!1}):t.json({errors:n.errors})});var mt=gt;const Ot=s.a.Router();Ot.get("/:id",async(e,t)=>{const r=await v(),a=S.USERS_COLLECTION,s=e.params.id,n=await(async(e,t,r)=>{try{const a=await e.collection(t).find({id:r}).project({_id:0,username:1,name:1}).toArray(),[s]=a;return void 0===s?null:s}catch(e){return D("Error finding user")}})(r,a,s);null===n?t.json(D("This user does not exist")):t.json(n)});var Et=Ot;const pt=s.a.Router();pt.use(async(e,t,r)=>{const a=e.headers.authorization;let s;if(a&&([,s]=a.split(" ")),s)try{const{success:a,user:n,errors:o}=await(async e=>await k.a.verify(e,S.SECRET,async(e,t)=>{if(e)return D("Failed to authenticate");const{email:r}=t,a=await v();try{const e=await j(a,"users",r);return null===e?D("No such user"):b("user",e)}catch(e){return D("Caught an error while checking if the user exists or not.")}}))(s);!0===a?(e.currentUser=n.email,r()):t.json(o)}catch(e){const r=D("Caught an error at the time of verifying token.");t.json(r)}else{const e=D("No token provided");t.json(e)}}),pt.use(J.BasicSetup,pe),pt.use(J.OAuthSetup,Pe),pt.use(J.Organisation,Tt),pt.use(J.WakaTime,tt),pt.use(J.GitHub,mt),pt.use(J.User,Et),pt.get(he.Home,(e,t)=>{t.json(b())});var _t=pt;const yt=s.a.Router(),It=async(e,t,r,{userID:a,email:s,password:n,username:o,name:i,organisation:c,manager:u})=>{try{const d=await e.collection(t).find({email:s}).project({_id:0}).toArray(),[l]=d;if(void 0!==l)try{await e.collection(t).remove({email:s}),await e.collection(r).update({id:c},{$pull:{manager:l.id,employee:l.id}},{multi:!0})}catch(e){return D("[Register]: Caught an error while registering user.")}try{const{success:r,errors:c}=await(async(e,t,{userID:r,email:a,password:s,username:n,name:o})=>{try{const i=await Oe(e,t,n);if(!0!==i.success)return i;const c=await B(s);return await e.collection(t).insertOne({id:r,email:a,password:c,username:n,name:o}),b()}catch(e){return D("[Register]: Caught an error while adding/updating user")}})(e,t,{userID:a,email:s,password:n,username:o,name:i});if(!0!==r)return{errors:c}}catch(e){return D("[Register]: Caught an error while adding user to the database")}try{const{success:t,errors:s}=await(async(e,t,{userID:r,organisation:a,manager:s})=>{try{return 0===s?await e.collection(t).update({id:a},{$push:{employee:r}}):await e.collection(t).update({id:a},{$push:{manager:r}}),b()}catch(e){return D("Caught an error while joining the organisation")}})(e,r,{userID:a,organisation:c,manager:u});return!0!==t?{errors:s}:b()}catch(e){return D("[Register]: Caught an error while adding user to the database")}}catch(e){return D("[Register]: Caught an error while registering the user to the organisation")}};yt.post(he.Home,async(e,t)=>{const r=await v(),a=S.USERS_COLLECTION,s=S.ORGANISATIONS_COLLECTION,n=e.body,o=l.a.generate().toLowerCase(),i=await It(r,a,s,{...n,userID:o});let c;if(!0===i.success){const e=G(n.email);c=b("token",e)}else c={errors:i.errors};t.json(c)});var At=yt;const Ct=s()();Ct.use(o()("dev")),Ct.use(c()()),Ct.use(Object(u.json)()),Ct.use(Object(u.urlencoded)({extended:!0})),Ct.use(he.Auth,me),Ct.use(he.Dashboard,_t),Ct.use(he.InviteAuth,At),Ct.get(he.Home,(e,t)=>{t.send("Roll over to /test to see it it's working or not")}),Ct.get(he.Test,(e,t)=>{t.json({status:"Working!"})});const Rt=Ct.listen(S.PORT,()=>{console.log(`Backend is running on PORT: ${S.PORT}`)});t.default=Rt}]);